//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `MainCell`.
    static let mainCell = _R.nib._MainCell()
    
    /// `UINib(name: "MainCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mainCell) instead")
    static func mainCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainCell)
    }
    
    static func mainCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MainCell? {
      return R.nib.mainCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MainCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `mainCell`.
    static let mainCell: Rswift.ReuseIdentifier<MainCell> = Rswift.ReuseIdentifier(identifier: "mainCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `AlamofireTest`.
    static let alamofireTest = _R.storyboard.alamofireTest()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `TabBar`.
    static let tabBar = _R.storyboard.tabBar()
    
    /// `UIStoryboard(name: "AlamofireTest", bundle: ...)`
    static func alamofireTest(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.alamofireTest)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    
    /// `UIStoryboard(name: "TabBar", bundle: ...)`
    static func tabBar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tabBar)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    struct localizable {
      /// en translation: List of themes
      /// 
      /// Locales: en
      static let mainTitle = Rswift.StringResource(key: "main.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Main
      /// 
      /// Locales: en
      static let mainTabBarItem = Rswift.StringResource(key: "main.tab.bar.item", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en
      static let settingsTabBarItem = Rswift.StringResource(key: "settings.tab.bar.item", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Training Alamofire
      /// 
      /// Locales: en
      static let mainAlamofireItem = Rswift.StringResource(key: "main.alamofire.item", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: List of themes
      /// 
      /// Locales: en
      static func mainTitle(_: Void = ()) -> String {
        return NSLocalizedString("main.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Main
      /// 
      /// Locales: en
      static func mainTabBarItem(_: Void = ()) -> String {
        return NSLocalizedString("main.tab.bar.item", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en
      static func settingsTabBarItem(_: Void = ()) -> String {
        return NSLocalizedString("settings.tab.bar.item", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Training Alamofire
      /// 
      /// Locales: en
      static func mainAlamofireItem(_: Void = ()) -> String {
        return NSLocalizedString("main.alamofire.item", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _MainCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MainCell
      
      let bundle = R.hostingBundle
      let identifier = "mainCell"
      let name = "MainCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MainCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MainCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try alamofireTest.validate()
      try launchScreen.validate()
      try main.validate()
      try settings.validate()
      try tabBar.validate()
    }
    
    struct alamofireTest: Rswift.StoryboardResourceType, Rswift.Validatable {
      let alamofireTestViewController = StoryboardViewControllerResource<AlamofireTestViewController>(identifier: "AlamofireTestViewController")
      let bundle = R.hostingBundle
      let name = "AlamofireTest"
      
      func alamofireTestViewController(_: Void = ()) -> AlamofireTestViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: alamofireTestViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.alamofireTest().alamofireTestViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'alamofireTestViewController' could not be loaded from storyboard 'AlamofireTest' as 'AlamofireTestViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"
      
      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Settings"
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      
      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.settings().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Settings' as 'SettingsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct tabBar: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabBarViewController
      
      let bundle = R.hostingBundle
      let name = "TabBar"
      let tabBarViewController = StoryboardViewControllerResource<TabBarViewController>(identifier: "TabBarViewController")
      
      func tabBarViewController(_: Void = ()) -> TabBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBarViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.tabBar().tabBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBarViewController' could not be loaded from storyboard 'TabBar' as 'TabBarViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
